{"title":"Docker 新手初探筆記","uid":"bc9344032968b466e3512767cf2bb0ea","slug":"docker-introduction","date":"2025-05-22T12:11:12.000Z","updated":"2025-05-22T12:17:50.528Z","comments":true,"path":"api/articles/docker-introduction.json","keywords":null,"cover":[],"content":"<p>以前在學 Docker 時整理的筆記~之後再慢慢整理一些 Dockerfile、k8s 之類的放上來(๑•̀ㅁ•́๑)✧</p>\n<h2 id=\"Container-v-s-VM\"><a href=\"#Container-v-s-VM\" class=\"headerlink\" title=\"Container v.s. VM\"></a>Container v.s. VM</h2><p>為了增加硬體利用率，會在硬體層上建立一層虛擬化平台，並在平台中建立並運行多個虛擬機(VM)，彼此獨立並共享硬體資源。雖然如此能有效利用硬體資源，但每個VM都須擁有一個獨立的Guest OS，因此會造成幾個問題：</p>\n<ol>\n<li>佔據硬體資源：每個虛擬機都需要使用底層硬體資源建立Guest OS，佔據記憶體與硬碟空間，且還需透過Hypervisor進行虛擬機器與底層資源的溝通</li>\n<li>啟動時間漫長：由於每個VM都含有OS映像檔而導致過於肥大，因此建立和起動都需花費大量時間</li>\n<li>較低的可攜性：會因裝置、作業系統等環境的不同，導致無法執行VM中的應用程式</li>\n</ol>\n<h3 id=\"容器化-Containerization\"><a href=\"#容器化-Containerization\" class=\"headerlink\" title=\"容器化(Containerization)\"></a>容器化(Containerization)</h3><p>是一種連同硬體作業系統與運行服務做虛擬化的技術，讓運作在平台上的容器(Container)<strong>共享一個Host OS的資源</strong>。Container的目標是為了改善VM因Guest OS所導致的問題，所以Container以應用程式為主，包含應用程式與其所需的所有程式庫、環境設定、資料庫與網路設定等，每個Container都擁有完整的運行環境，不會受到其他應用程式或系統的影響，讓應用程式更容易移植和部屬到其他裝置或作業系統<br><img src=\"https://hackmd.io/_uploads/Hk-Y4Nnq1g.png\" alt=\"image\"></p>\n<h2 id=\"容器映像-Container-Image\"><a href=\"#容器映像-Container-Image\" class=\"headerlink\" title=\"容器映像(Container Image)\"></a>容器映像(Container Image)</h2><p>容器映像可理解為一個可執行的軟體包，是一個運行應用程式的環境，包含了可執行程式碼、支援程式庫、運算要求條件及所有依賴項，可以在不同平台運行。每個容器都需載入一個容器映像檔來執行。<br>透過容器化技術，使用者只須將應用程式及相關依賴項打包到一個容器映像中，並指定所需的運行環境，就可以在Docker、Kubernetes等支援容器化技術的平台上運行。<br><img src=\"https://hackmd.io/_uploads/SJroyB2q1e.png\" alt=\"image\"></p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p>Docker是一個開源的容器化平台，可以用來打包、運行和分享應用程式。Docker容器實現了應用程式的獨立性和可移植性，讓開發者和運維人員可以更加便捷地進行應用程式的開發、部署和運維。<br>Docker映像檔包含執行軟體所需的一切功能：程式碼、程式執行環境、驅動程式、工具、程式庫、部屬等。<br>Docker 容器是 Docker 映像檔的執行結果。不過，與虛擬機器管理程式的傳統虛擬化不同，Docker 容器會在主機作業系統的核心上執行。在 Docker 映像檔中，沒有如圖 1 所示的個別作業系統。<br><img src=\"https://hackmd.io/_uploads/Hyx840ncke.png\" alt=\"image\"></p>\n<p><strong>優點：</strong></p>\n<ol>\n<li>環境一致性：Docker可以將應用程式及其所有依賴項打包在一個容器中，確保從開發到測試到生產的整個生命週期中環境的一致性。</li>\n<li>輕量級、高性能：與傳統VM相比，Docker容器不須運行一整套OS，而是直接使用主機的OS，使得容器變得非常輕量且執行速度快。</li>\n<li>應用程式隔離：每個容器在其自己的容器中運行，有自己的網路和文件系統等，互不干擾，使得各種應用程式能在同一台機器上共存。</li>\n<li>可移植性：由於容器包含所有需要的依賴項，因此他可以在任何安裝了Docker的系統上運行(不論是在實體機or虛擬機、在數據中心or在雲端)</li>\n<li>易於管理和擴張：Docker提供豐富的工具和平台用於管理容器、服務等，使應用程式的部屬、擴展合為運變得簡單。</li>\n</ol>\n<p><strong>主要功能：</strong></p>\n<ol>\n<li>容器創建和管理：Docker提供創建、啟動、停止、移動和刪除容器的指令</li>\n<li>映像創建和分發：Docker可以創建容器映像，使其可被重複利用或移植到其他環境、分享給其他使用者。可實現應用程式快速部屬和擴展的基礎</li>\n<li>版本控制：Docker支援映像檔的版本控制</li>\n<li>資源隔離：每個 Docker 容器都有自己的檔案系統、自己的網路堆疊 (以及自己的 IP 位址)、自己的處理作業空間，以及針對 CPU 和記憶體定義的資源限制。由於 Docker 容器不需要啟動作業系統，因此會立即啟動。Docker 資源即隔離，例如將主機作業系統的資源隔離，而非虛擬化 (亦即VM提供Host OS系統的Guest OS系統)。</li>\n<li>資源整合：Docker可以將主機的資源如磁盤、網路和文件系統整合到容器中，使容器可以像真實的獨立系統一樣運行。</li>\n</ol>\n","feature":true,"text":"以前在學 Docker 時整理的筆記~之後再慢慢整理一些 Dockerfile、k8s 之類的放上來(๑•̀ㅁ•́๑)✧ Container v.s. VM為了增加...","permalink":"/post/docker-introduction","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"資訊工程","slug":"資訊工程","count":1,"path":"api/categories/資訊工程.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Container-v-s-VM\"><span class=\"toc-text\">Container v.s. VM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E5%8C%96-Containerization\"><span class=\"toc-text\">容器化(Containerization)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E6%98%A0%E5%83%8F-Container-Image\"><span class=\"toc-text\">容器映像(Container Image)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker\"><span class=\"toc-text\">Docker</span></a></li></ol>","author":{"name":"三三","slug":"blog-author","avatar":"https://i.imgur.com/zzSYOPK.jpg","link":"/","description":"一個努力學習技術的小小資工人","socials":{"github":"https://github.com/Sandrala0413","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"nonogram","uid":"2510e5cf9cf1d56df8292256586fa060","slug":"nonogram","date":"2025-09-11T15:54:11.000Z","updated":"2025-09-11T15:54:11.642Z","comments":true,"path":"api/articles/nonogram.json","keywords":null,"cover":null,"text":"","permalink":"/post/nonogram","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"三三","slug":"blog-author","avatar":"https://i.imgur.com/zzSYOPK.jpg","link":"/","description":"一個努力學習技術的小小資工人","socials":{"github":"https://github.com/Sandrala0413","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"UVa 499 - What's The Frequency, Kenneth? 解題紀錄","uid":"d0fa460b3c567281dae195dbed83ee86","slug":"uva-499","date":"2025-05-21T06:36:04.000Z","updated":"2025-09-24T05:17:51.670Z","comments":true,"path":"api/articles/uva-499.json","keywords":null,"cover":"https://i.pinimg.com/736x/5d/78/a1/5d78a1b565caee3451ccaeb7db7a4b09.jpg","text":"CPE 考試小小經驗分享，其實多刷一星題練練手感，考試時就至少能答對三題了，一星題大多是考純 IO，少部分才需要用到一點 DP，二星三星也大多使用 DP (可能...","permalink":"/post/uva-499","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"UVa","slug":"UVa","count":16,"path":"api/categories/UVa.json"}],"tags":[{"name":"Java","slug":"Java","count":15,"path":"api/tags/Java.json"},{"name":"UVa-⭐","slug":"UVa-⭐","count":13,"path":"api/tags/UVa-⭐.json"}],"author":{"name":"三三","slug":"blog-author","avatar":"https://i.imgur.com/zzSYOPK.jpg","link":"/","description":"一個努力學習技術的小小資工人","socials":{"github":"https://github.com/Sandrala0413","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}