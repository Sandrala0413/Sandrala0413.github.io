{"title":"Intel VTune Profiler實作紀錄","uid":"f6fb998cdf8b4b8d8fe38e630943d18b","slug":"VTune","date":"2025-09-24T05:18:12.000Z","updated":"2025-09-24T20:50:58.482Z","comments":true,"path":"api/articles/VTune.json","keywords":null,"cover":"https://i.pinimg.com/736x/a9/90/98/a99098763176f685d89453c3ae18bb34.jpg","content":"<p>最近在研究 Nonogram 的過程中，有了幾項有趣的發現：在執行系上高建壹學長撰寫的邏輯規則程式時，我的電腦不僅執行時間縮短了約 30%（應該是硬體效能差異），連 DFS 的呼叫次數也明顯減少。老師因此建議我使用 Profiling 工具VTune，檢測程式在不同階段的效能瓶頸，確認到底是哪個部分造成差異</p>\n<h2 id=\"工具簡介\"><a href=\"#工具簡介\" class=\"headerlink\" title=\"工具簡介\"></a>工具簡介</h2><p>Vtune是Intel出的Profiling工具，可以評估程式效能瓶頸，支援多種語言&#x2F;框架，包含c&#x2F;c++、java、python等，基本上主流的都可以，作業系統則支援Windows、Linux主流版本，最重要的是它有GUI圖形介面可以使用ㄛ!</p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><ul>\n<li>CPU&#x2F;演算法耗時分析(尋找Hotspots)<ul>\n<li>自動統計程式中最耗時的函式、程式碼區塊或迴圈</li>\n<li>可檢視call stack(呼叫堆疊)與flame graph，幫助快速鎖定瓶頸</li>\n</ul>\n</li>\n<li>記憶體&#x2F;快取分析(Memory access)<ul>\n<li>計算cache命中率、記憶體頻寬使用率</li>\n<li>協助找出因cache miss或資料移動造成的延遲</li>\n</ul>\n</li>\n<li>系統分析<ul>\n<li>可針對特定功能、進程、時間段進行過濾分析</li>\n<li>支援CPU、GPU、FPGA與I&#x2F;O效能監測</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"環境配置與安裝\"><a href=\"#環境配置與安裝\" class=\"headerlink\" title=\"環境配置與安裝\"></a>環境配置與安裝</h2><h3 id=\"step-1：安裝intel-oneAPI\"><a href=\"#step-1：安裝intel-oneAPI\" class=\"headerlink\" title=\"step 1：安裝intel oneAPI\"></a>step 1：安裝intel oneAPI</h3><p><a href=\"https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit-download.html\">Get the Intel® oneAPI Base Toolkit</a><br>VTune包含在oneAPI套件中，進到頁面選擇作業系統，還有一個選項是Offline&#x2F;Online installer，翻了網路上的文章好像都沒有說到這塊，問了一下AI，差別好像是在Online安裝時需要連線到Intel伺服器，優點是檔案比較小，因為可以客製化單獨挑選想要下載的元件；Offline的就不需網路，但檔案就大很多(因為他全部套件整包都包含在裡面)，</p>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>前往網站獲取下載指令，可以自行選擇安裝方式<br>接著就能用下面指令打開offline installer的介面了(實際指令看下載頁面提供的，可能會依版本號不太一樣)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/3b7a16b3-a7b0-460f-be16-de0d64fa6b1e/intel-oneapi-base-toolkit-2025.2.1.44_offline.sh</span><br><span class=\"line\">sh intel-oneapi-base-toolkit-2025.2.1.44_offline.sh</span><br></pre></td></tr></table></figure>\n<p>VTune使用的詳細指令可以看<a href=\"https://www.intel.com/content/www/us/en/docs/vtune-profiler/user-guide/2024-2/command-syntax.html\">VTune command line Syntax</a></p>\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>我這邊選擇的是Online<br><img src=\"/../imgs/image1.png\" alt=\"image\"></p>\n<p>下載好打開VTune Profiler，一進去他會導覽你去Help Tour，大概對整個的使用方法用一個範例簡單介紹，點<code>New Project</code>可以開始新增專案<br><img src=\"/../imgs/image2.png\" alt=\"image\"></p>\n<p>建立之後開始指定要分析的程式</p>\n<ul>\n<li>Application：要分析的程式</li>\n<li>Application parameters：執行時要加的命令列參數，不一定要</li>\n<li>Working directory：指定程式執行時的工作目錄，像我這邊程式執行時需要餵txt給他，所以就指定根目錄<br><img src=\"/../imgs/image3.png\" alt=\"image\"></li>\n</ul>\n<p>按執行後VTune會產出性能快照，裡面包含Analysis tree，可以選擇接下來要詳細測試的類型，在這裡也可以觀察出最突出的效能瓶頸，會用紅色標註起來(像Hotspots圖標一樣)<br><img src=\"/../imgs/image4.png\" alt=\"image\"></p>\n<p>這邊遇到一個問題，在執行Hotspots分析時出現下面錯誤訊息，說是找不到sepdrv driver，但我檢查過是有安裝的，後來發現得用<em><strong>系統管理員</strong></em>身分打開VTune，就解決囉~<br><img src=\"/../imgs/image5.png\" alt=\"image\"></p>\n<h3 id=\"step-2：開始效能分析\"><a href=\"#step-2：開始效能分析\" class=\"headerlink\" title=\"step 2：開始效能分析\"></a>step 2：開始效能分析</h3><p>VTune有好幾種效能分析的方式：</p>\n<ul>\n<li>直連VTune啟動分析：打開VTune GUI，指定要分析的程式，或 在程式已經在跑的情況下，attach到該程式的進程，開始收集資料<br>我一開始最直覺的想嘗試這個做法，網路上大多也是這樣，有興趣的人可以看一下我的研究過程，總之後來試到覺得太沒效率就放棄了嗚嗚<br>:::spoiler try &amp; erorrrrrrrrrrrr 紀錄</li>\n</ul>\n<p>開始執行後遇到一個大問題：<code>Cannot locate debugging information</code></p>\n<p><img src=\"/../imgs/image6.png\" alt=\"image\"></p>\n<p>其實這樣也能正常執行，只是看不到詳細個別的function，剛開始我以為又是哪個driver沒有安裝好，查下發現以為是因為VTune得接收PDB符號(這個通常用於debug)才能將對應的符號對應到編譯程式中的標示符和指令，還因此走了一大段彎路想盡辦法產生<code>.pdb</code>，後來又看到這篇發問，完全就是我遇到的問題<br><a href=\"https://community.intel.com/t5/Analyzers/VTune-does-not-show-source-file-even-with-debugging-info-enabled/m-p/1311678#M21281\">VTune does not show source file even with debugging info enabled</a></p>\n<p>沒想到在產生<code>.pdb</code>這個步驟我又大大的卡關了<br>首先根據Intel doc有提供產生pdb的流程，但是是在Visual Studio IDE環境下(到現在我才知道原來這跟vs code不一樣)，vs code得手動在編譯時設定選項，而且得改成微軟家自己的MSVC編譯器，因此我就將原本的Makefile改成以下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Compiler settings</span><br><span class=\"line\">CC = cl</span><br><span class=\"line\">CXXFLAGS = /O2 /Zi /EHsc /I$(INCdir)</span><br><span class=\"line\">LDFLAGS = /DEBUG</span><br><span class=\"line\">INCdir = include</span><br></pre></td></tr></table></figure>\n<p>然後就開心的在CMD中make，卻又發現以下問題</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process_begin: CreateProcess(NULL, cl /O2 /Zi /EHsc /Iinclude /c src/board.cpp /Foobj/board.obj, ...) failed.</span><br><span class=\"line\">make (e=2): make: *** [makefile:36: obj/board.obj] Error 2</span><br></pre></td></tr></table></figure>\n<p>AI說這是因為<code>cl.exe</code> 是 MSVC 編譯器，只存在於 Visual Studio &#x2F; Build Tools 安裝的 Developer Command Prompt 或 Native Tools Command Prompt，普通 shell 找不到路徑，所以 Make 無法執行 cl<br>上網看了很多的資訊都是教如何在visual studio中安裝，或是資訊太久以前，後來發現visual studio code官方是有doc的，跟著做了一次終於可以了(淚目<br><a href=\"https://code.visualstudio.com/docs/cpp/config-msvc\">Configure VS Code for Microsoft C++</a><br>:::</p>\n<ul>\n<li>先用 perf 工具收集，再匯入 VTune：先使用 Linux 的 perf（一個系統級效能分析工具）在命令列收集程式執行的效能事件與統計數據，生成報告檔（如 perf.data），接著打開 VTune，把這些檔案匯入，利用 GUI 做後續分析</li>\n</ul>\n<p>我這邊是用Intel編譯器執行VTune分析，最後再匯入，Windows GUI視覺化</p>\n<p>首先先載入VTune環境變數，如果不知道<code>setvars.sh</code>在哪可以先用指令找(通常在家目錄底下<code>intel/oneapi/setvars.sh</code>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~/intel -name setvars.sh 2&gt;/dev/null</span><br></pre></td></tr></table></figure>\n<p>載入環境變數</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &#123;你的路徑&#125;/intel/oneapi/setvars.sh</span><br></pre></td></tr></table></figure>\n<p>可以用<code>vtune -help</code>測試是否載入成功</p>\n<p>接下來可以開始執行要分析的程式，注意程式在編譯時一定要帶<code>-g</code>才能帶debug info!!!<br>開始分析指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vtune -collect <span class=\"variable\">$COLLECTION_TYPE</span> -r <span class=\"variable\">$RESULT_DIR</span> <span class=\"variable\">$APPLICATION</span></span><br><span class=\"line\"><span class=\"variable\">$APPLICATION_PARAMETERS</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>$COLLECTION_TYPE：分析類型 (hotspots、memory-access、uarch-exploration 等)</li>\n</ul>\n<p>分析完會打包在剛剛指定的資料夾裡，如果你是連遠端機器可以用scp把資料傳輸回本地端，我是用wsl所以沒有這個問題</p>\n<p>點左側選單的資料夾載入剛剛的<code>.vtune</code>檔就可以開始看分析了~<br><img src=\"/../imgs/image7.png\" alt=\"image\"></p>\n","feature":true,"text":"最近在研究 Nonogram 的過程中，有了幾項有趣的發現：在執行系上高建壹學長撰寫的邏輯規則程式時，我的電腦不僅執行時間縮短了約 30%（應該是硬體效能差異）...","permalink":"/post/VTune","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"開發紀錄","slug":"開發紀錄","count":1,"path":"api/categories/開發紀錄.json"}],"tags":[{"name":"VTune","slug":"VTune","count":1,"path":"api/tags/VTune.json"},{"name":"Profiling","slug":"Profiling","count":1,"path":"api/tags/Profiling.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E5%85%B7%E7%B0%A1%E4%BB%8B\"><span class=\"toc-text\">工具簡介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">主要功能</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%92%B0%E5%A2%83%E9%85%8D%E7%BD%AE%E8%88%87%E5%AE%89%E8%A3%9D\"><span class=\"toc-text\">環境配置與安裝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#step-1%EF%BC%9A%E5%AE%89%E8%A3%9Dintel-oneAPI\"><span class=\"toc-text\">step 1：安裝intel oneAPI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Linux\"><span class=\"toc-text\">Linux</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Windows\"><span class=\"toc-text\">Windows</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#step-2%EF%BC%9A%E9%96%8B%E5%A7%8B%E6%95%88%E8%83%BD%E5%88%86%E6%9E%90\"><span class=\"toc-text\">step 2：開始效能分析</span></a></li></ol></li></ol>","author":{"name":"三三","slug":"blog-author","avatar":"https://i.imgur.com/zzSYOPK.jpg","link":"/","description":"一個努力學習技術的小小資工人","socials":{"github":"https://github.com/Sandrala0413","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Nonogram 基礎實作","uid":"fb956e87dc35070660f1f5d5925e378f","slug":"nonogram","date":"2025-09-11T15:54:11.000Z","updated":"2025-09-24T20:34:56.827Z","comments":true,"path":"api/articles/nonogram.json","keywords":null,"cover":"https://i.pinimg.com/1200x/97/75/71/977571cd90f67cbc22416bf3ce3106b2.jpg","text":"","permalink":"/post/nonogram","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"實作紀錄","slug":"實作紀錄","count":1,"path":"api/categories/實作紀錄.json"}],"tags":[{"name":"Nonogram","slug":"Nonogram","count":1,"path":"api/tags/Nonogram.json"}],"author":{"name":"三三","slug":"blog-author","avatar":"https://i.imgur.com/zzSYOPK.jpg","link":"/","description":"一個努力學習技術的小小資工人","socials":{"github":"https://github.com/Sandrala0413","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}